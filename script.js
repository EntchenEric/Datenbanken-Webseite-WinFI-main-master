function toggleMenu() {
  var x = document.querySelector("nav ul");
  if (x.style.display === "flex") {
    x.style.display = "none";
  } else {
    x.style.display = "flex";
  }
}

const observer = new IntersectionObserver((entries) => {
  entries.forEach((entry) => {
    if(entry.isIntersecting){
      entry.target.classList.add("show")
    } 
  });
});

const hiddenElements = document.querySelectorAll(".hidden")
hiddenElements.forEach((el) => {observer.observe(el)})

const correctAnswers = ["b", "b", "c", "d", "d", "b", "a", "a", "c", "a"];

const form = document.getElementById("quiz-form");
const submitButton = document.getElementById("submit-button");
const resultDiv = document.getElementById("result");

form.addEventListener("submit", function (event) {
  event.preventDefault();
  const userAnswers = [
    form.q1.value,
    form.q2.value,
    form.q3.value,
    form.q4.value,
    form.q5.value,
    form.q6.value,
    form.q7.value,
    form.q8.value,
    form.q9.value,
    form.q10.value
  ];
  let score = 0;
  let resultHTML = "<h2>Ergebnis</h2>";
  for (let i = 0; i < userAnswers.length; i++) {
    if (userAnswers[i] === correctAnswers[i]) {
      score++;
      resultHTML += "<p>Frage " + (i + 1) + ": <strong>Richtig</strong></p>";
    } else {
      resultHTML += "<p>Frage " + (i + 1) + ": <strong>Falsch</strong> (richtige Antwort: " + correctAnswers[i] + ")</p>";
    }
  }
  resultHTML += "<p>Du hast " + score + " von 10 Fragen richtig beantwortet.</p>";
  if (score === 10) {
    resultHTML += "<p>Sehr gut! Note 1.</p>";
  } else if (score >= 8) {
    resultHTML += "<p>Gut! Note 2.</p>";
  } else if (score >= 6) {
    resultHTML += "<p>Befriedigend. Note 3.</p>";
  } else if (score >= 4) {
    resultHTML += "<p>Ausreichend. Note 4.</p>";
  } else {
    resultHTML += "<p>Durchgefallen.</p>";
  }
  resultDiv.innerHTML = resultHTML;
  submitButton.disabled = true;
});



// H√∂he des Viewports berechnen
const viewportHeight = window.innerHeight;

// Funktion zum √úberpr√ºfen der Scroll-Position
function checkScrollPosition() {
  // H√∂he des gescrollten Bereichs berechnen
  const scrolledHeight = window.pageYOffset;


  // Wenn der Benutzer an der Spitze der Seite ist, Border Radius auf 0 setzen
  if (scrolledHeight === 0) {
    document.documentElement.style.setProperty('--scrollbar-radius', '0');
  } else {
    // Andernfalls Border Radius auf 10 setzen
    document.documentElement.style.setProperty('--scrollbar-radius', '15px');
  }
  if (scrolledHeight === document.documentElement.scrollHeight - document.documentElement.clientHeight) {
    document.documentElement.style.setProperty('--scrollbar-radius-down', '0px');
  } else {
    document.documentElement.style.setProperty('--scrollbar-radius-down', '15px');
  }
}

// Event-Listener hinzuf√ºgen, um √Ñnderungen der Scroll-Position zu erkennen
window.addEventListener('scroll', () => {
  // Verz√∂gerung hinzuf√ºgen, um die Leistung zu verbessern
  setTimeout(checkScrollPosition, 100);
});

// CSS-Variable initialisieren
document.documentElement.style.setProperty('--scrollbar-radius', '0');

// CSS-Regel hinzuf√ºgen, um den √úbergang zu animieren
const style = document.createElement('style');
style.innerHTML = `
::-webkit-scrollbar-thumb {
  transition: border-radius 0.2s ease-in-out;
}
`;
document.head.appendChild(style);


// Speichert die aktuellen Themes
var themes = ["dark", "light", "blue", "high-contrast", "pink", "red", "sky"];
var currentTheme = 0;
const themeButton = document.getElementById("themeButton");

// √Ñndert das aktuelle Theme
function toggleTheme() {
  // Wechselt zum n√§chsten Theme
  currentTheme = (currentTheme + 1) % themes.length;

  // √Ñndert das HTML-Element "root", um das Theme anzuwenden
  document.documentElement.className = themes[currentTheme];
  switch (currentTheme) {
    case 0:
      themeButton.innerHTML = 'üåô'
      break;
    case 1:
      themeButton.innerHTML = 'üåû'
      break;
    case 2:
      themeButton.innerHTML = 'üåä'
      break;
    case 3:
      themeButton.innerHTML = 'üåï'
      break;
    case 4:
      themeButton.innerHTML = 'üê∑'
      break;
    case 5:
      themeButton.innerHTML = 'üåã'
      break;
    case 6:
      themeButton.innerHTML = 'ü•∂'
      break;

  }
}


videos = [
  ["Tabellen erstellen", "Erkl√§rvideo1_alternative.mp4", "Um Daten in eine Datenbank einzutragen, m√ºssen sie ganz einfach oben Links auf Ansicht und in die in die Entwurfsansicht wechseln. Hier k√∂nnen sie in der Spalte Feldname unter ID in die einzelnen Zellen klicken und sie Beschriften. In Unserem Beispiel erstellen wir eine neue Spalte mit einer Liste aus Namen. Dazu w√§hlen wir den Feldatentyp ‚ÄûKurzer Text‚Äú. Um nun unter der neu erstellten Spalte schreiben zu k√∂nnen gehen wir zur√ºck in die Datenblatt Ansicht und k√∂nnen nun  in der Spalte Namen unsere Daten eingeben . Das Feld ID wird automatisch ein Wert zugewiesen"],
  ["Prim√§rschl√ºssel", "Erkl√§rvideo2.mp4", "Ein Prim√§rschl√ºssel ist ein essenzieller Bestandteil von Datenbanken. Ein Prim√§rschl√ºssel muss immer einzigartig sein. Dies ist durch den Autowert einfach m√∂glich. Immer wenn sie in Access eine neue Tabelle erstellen, wird automatisch das Feld ID mit dem Felddatentyp Autowert generiert. Wie zum Beispiel das jeder Kunde eine Einzigartige kundenID bekommt."],
  ["Felddatentypen", "Erkl√§rvideo3.mp4", "In Access gibt es insgesamt 14 Verschiedene Felddatentypen. Die Wichtigsten sind der Kurze bzw. Lange Text, die Zahl, das Datum/Uhrzeit und der Autowert. Der Kurzen und Lange Text speichern. Die Namen der Datentypen sind ziemlich selbsterkl√§rend. Der Kurze und Lange Text speichert Text, die Zahl speichert Zahlen, Datum/Uhrzeit speichert ein Datum und eine Uhrzeit. Der Autowert z√§hlt automatisch von 1 an nach oben. Dies ist f√ºr den Prim√§rschl√ºssel wichtig."],
  ["Abfragen", "Erkl√§rvideo6.mp4", "Wir als Unternehmen wollen eine Abfrage erstellen, wo wir Alle Kunden aus M√ºnchen auflisten. Diese abfrage wird erstellt in dem wir auf ‚ÄûErstellen-Abfrageentwurf klicken. danach gehen wir auf die rechte Seite und w√§hlen die Tabelle Kunden. In diesem Fenster w√§hlen wir jetzt unser Kriterium und die Sachen, die wir aufgelistet haben wollen, also Name und Nachname. Damit wir nun alle Kunden in M√ºnchen finden f√ºgen wir in der Spalte Ort das Kriterium M√ºnchen hinzu. Nun gehen wir oben links auf ausf√ºhren und wie sie sehen, sehen sie nun eine Liste von Kunden aus M√ºnchen"],
  ["Formulare", "Erkl√§rvideo4.mp4", "Jemand aus unserem Unternehmen hat geheiratet und einen anderen Nachnamen.Um das zu √§ndern wollen wir auch f√ºr die Zukunft Formulare erstellen. Um ein  Formular zu erstellen Klicken wir auf erstellen und auf Formularassistent. Dort w√§hlen wir dann die Sachen aus die wir √§ndern wollen. Damit wir das Formular auch in Zukunft benutzen k√∂nnen w√§hlen wir hier Name Nachname Anschrift Ort und Postleitzahl aus. Danach nehmen wir das Layout einspaltig. Und gehen dann auf Fertigstellen. Nun suchen wir unten die Person die Geheiratet hat und in unserem Fall ist das der Tim und √§ndern nun hier in der Zeile Nachname ihren Nachnamen ein. Und wenn wir nun in die Tabelle Personal gehen sehen wir das der Nachname von Tim ge√§ndert wurde "],
  ["Berichte", "Erkl√§rvideo5.mp4", "Folgt(?)"],
]
let currentVideo = 0
let currentTime = 0
let isPaused = false
let isDragging = false;


const title = document.getElementById("titlename");
const video = document.getElementById("video");
const pause = document.getElementById("play-pause");
const volumeBtn = document.getElementById("volume");
const volumeBar = document.getElementById("volumeBar");
const volumeChanger = document.getElementById("VolumeChanger");
const progress = document.getElementById("progressbar");
const transcript = document.getElementById("transcript");

video.volume = 1;

volumeBar.style.display = "none"
volumeBtn.style.width = "5%";


function loadVideo() {
  console.log(videos[currentVideo])
  video.setAttribute("src", videos[currentVideo][1]);
  video.currentTime = 0;
  pause.innerHTML = '<i class="fa-solid fa-play"></i>'
  title.innerHTML = videos[currentVideo][0]
  transcript.innerHTML = videos[currentVideo][2];
}

function togglePause() {
  console.log(video.paused);
  if (!video.paused) {
    pause.innerHTML = '<i class="fa-solid fa-play"></i>'
    video.pause();
  } else {
    pause.innerHTML = '<i class="fa-solid fa-pause"></i>';
    video.play();
  }
}

function nextVideo() {
  currentVideo++;
  if (currentVideo >= videos.length) {
    currentVideo = 0;
  }
  loadVideo();
}

function previousVideo() {
  currentVideo--;
  if (currentVideo <= -1) {
    currentVideo = videos.length - 1;
  }
  loadVideo();
}

volumeChanger.addEventListener("mouseenter", () => {
  volumeBar.style.display = "flex";
  volumeBtn.style.width = "5%";
});

volumeChanger.addEventListener("mouseleave", () => {
  volumeBar.style.display = "none"
  volumeBtn.style.width = "5%";
});

// Add keyboard control
document.addEventListener("keydown", (event) => {
  if (event.code === "ArrowUp" || event.code === "ArrowDown") {
    event.preventDefault();
    const increment = event.code === "ArrowUp" ? 0.1 : -0.1;
    const newVolume = Math.min(Math.max(video.volume + increment, 0), 1);
    video.volume = newVolume;
    volumeBar.volume = video.volume * 100
  }
});

// Add fullscreen button functionality
const fullscreenBtn = document.getElementById("fullscreen");
fullscreenBtn.addEventListener("click", () => {
  if (!document.fullscreenElement) {
    video.requestFullscreen();
  } else {
    document.exitFullscreen();
  }
});

volumeBar.addEventListener("input", () => {
  console.log(volumeBar.value)
  video.volume = volumeBar.value / 100;
  if (volumeBar.value >= 75) {
    volumeBtn.innerHTML = '<i class="fa-solid fa-volume-high"></i>';
  } else if (volumeBar.value >= 25) {
    volumeBtn.innerHTML = '<i class="fa-solid fa-volume-low"></i>';
  } else if (volumeBar.value != 0) {
    volumeBtn.innerHTML = '<i class="fa-solid fa-volume-off"></i>';
  } else {
    volumeBtn.innerHTML = '<i class="fa-solid fa-volume-xmark"></i>';
  }

});

video.addEventListener("timeupdate", () => {
  const currentTime = video.currentTime;
  const duration = video.duration;
  const percentage = (currentTime / duration) * 100;
  progress.value = percentage;
  if(!video.duration){
    progress.value = 0
  }
});

progress.addEventListener("input", () => {
  const percentage = progress.value;
  const duration = video.duration;
  const currentTime = (percentage / 100) * duration;
  video.currentTime = currentTime;
});

loadVideo()


const taskholder = document.getElementById("taskholder")
const TaskTitle = document.getElementById("TaskTitle")
const TaskImage = document.getElementById("TaskImage")
const TaskText = document.getElementById("TaskText")
const TaskControllBar = document.getElementById("TaskControllBar")
const nextTask = document.getElementById("NextTask")
const TaskBefore = document.getElementById("TaskBefore")
const L√∂sung = document.getElementById("L√∂sung")

let currentTaskID = 0

const tasks = [
  ["Abfragen", "nix", 'Herr Schmidt m√∂chte gerne erfahren, welche Kunden ein Zahlungsniveau von "Unzureichend" haben. Erstellen sie f√ºr Herr Schmidt eine Abfrage, durch welche der Vorname, Nachname, die Email und die Telefonnummer aller Kunden, welche ein Zahlungsniveau von "Unzureichend" haben, angezeigt werden.', "Schauen Sie sich unsere Erkl√§rvideos an. Alle n√∂tigen Informationen finden sie dort.", "L√∂sung1.png"],
  ["Abfragen2", "nix", 'Frau Johanna B√∂hme hat gek√ºndigt. Erstellen Sie eine Abfrage, um ihre Daten aus der Datenbank zu l√∂schen.', "Um Daten aus einer Tabelle durch eine Abfrage zu l√∂schen, w√§hlen sie in den men√º Abfrageentwurf L√∂schen."],
  ["Abfragen3", "nix", 'Leo Austerm√ºhle (Kunde) ist in die K√∂nigsstra√üe 35 gezogen. Erstellen Sie eine Abfrage, um seine Daten zu berichtigen.', "Um Daten aus einer Tabelle durch eine Abfrage zu √§ndern, w√§hlen sie in den men√º Abfrageentwurf Aktualisieren."],
  ["Abfragen4", "nix", "F√ºr das n√§chste Meeting m√∂chte Herr Schmidt gerne die Durchschnittlichen Verkaufskosten aller Produkte und die Durchschnittlichen Herstellungskosten aller Produkte erfahren. Erstellen Sie eine Abfrage, durch welche er diese Informationen erf√§hrt.", "Klicken sie in dem Men√º Abfrageentwurf auf Summen, um Funktionen wie den Mittelwert zu nutzen."],
  ["Abfragen5", "nix", "Herr Schmidt m√∂chte gerne wissen, ob er mit Allen Produkten profit macht. Erstellen Sie eine Abfrage, in welcher alle Produkte, welche keinen Profit abwerfen, angezeigt werden.", "Sie k√∂nnen in dem Kriterium auch Mathematische Operationen durchf√ºhren. z.B. '[Artikel].[LVP] > 100' zeigt an, wo der LVP Gr√∂√üer als 100 ist."],
  ["Formulare1", "nix", "Herr Schmidt m√∂chte die Daten seines Personals gerne einfacher bearbeiten k√∂nnen. Erstellen sie ein Bericht, das es erm√∂glicht, die Daten des Personals zu bearbeiten.", "Verwenden sie den Formularassistenten, um ein Formular zu erstellen."],
  ["Formulare2", "nix", "Herr Schmidt h√§tte gerne eine einfachere M√∂glichkeit, den Rabatt und das Skonto f√ºr die einzelnen Produkte anzupassen. Erstellen sie ein Formular mit welchem sie den Rabatt und das Skonto f√ºr die Produkte anpassen k√∂nnen.", "Verwenden sie den Formularassistenten, um ein Formular zu erstellen."],
  ["Berichte1", "nix", "Erstellen sie einen Bericht, in welchen der Vorname, Nachname und das Zahlungsniveau der Kunden angezeigt wird.", "Verwenden sie den Berichtassistenten, um ein Bericht zu erstellen."],
  ["Berichte2", "nix", "Die Buchhaltung w√ºnscht sich eine Einfache m√∂glichkeit, die IBan und Bic der einzelnen Mitarbeiter einzusehen.", "Verwenden sie den Berichtassistenten, um ein Bericht zu erstellen."]
]

function NextTask(){
  currentTaskID++;
  if(currentTaskID >= tasks.length){
    currentTaskID = 0
  }
  refreshTasks()
}

function BeforeTask(){
  currentTaskID--;
  if(currentTaskID < 0){
    currentTaskID = tasks.length - 1
  }
  refreshTasks()
}

function L√∂sungAnzeigen(){
  TaskImage.setAttribute("src", tasks[currentTaskID][4])
}

function tipp(){
  alert(tasks[currentTaskID][3])
}

function refreshTasks(){
  TaskTitle.innerHTML = tasks[currentTaskID][0]
  if(tasks[currentTaskID][1] != "nix"){
    TaskImage.setAttribute("src", tasks[currentTaskID][1])
  }else{
    TaskImage.setAttribute("src", "")
  }
  TaskText.innerHTML = tasks[currentTaskID][2]
}
refreshTasks()